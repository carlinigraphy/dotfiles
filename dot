#!/usr/bin/env bash
# vim: ft=bash tw=80
# shellcheck disable=SC2155,SC2016,SC2295,SC2086
#
#--- TODO ----------------------------------------------------------------------
# [ ] trap rollback on error
#     - don't want to get half way through moving directories/files into the
#       repo, crash, and not save the new database back
#     - each time an action is taken, push a corresponding rollback command?
#     - i.e., running ['mv', 'foo', 'bar'], pushes ['mv', 'bar', 'foo']
# [ ] bash completion
#
#-------------------------------------------------------------------------------

set -e

declare -g  THIS=$( realpath "${BASH_SOURCE[0]}" )
declare -g  PROGDIR="${THIS%/*}"
declare -g  DATABASE="${PROGDIR}/database"
declare -gA MAP=()   # { source -> dest }
#declare -gA RMAP=()  # { dest -> source[] }
#declare -g  SOURCE_LIST=
#declare -gi _SOURCE_LIST_IDX=0
## For easier diff functionality. If the destination is a file, exec `nvim -d`
## for all sources that refer to the destination.

touch "${DATABASE}" -a
mkdir -p "${PROGDIR}/dotfiles"

declare -g hg="hg -R ${PROGDIR}"

# PROGDIR/
#  +-- database
#  `-- dotfiles/
#       +-- bash/
#       |    `-- .bashrc
#       `-- nvim/

function usage {
   declare -i status="$1"
   cat <<EOF

usage: ${THIS##*/} [option] command

commands:
   add FILE          assume ownership of \$FILE
   deploy FILE       symlink owned \$FILE to host
   ls                print owned files

EOF
exit "$status"
}


function load_data {
   local src dst
   while IFS=$'\t' read -r src dst ; do
      MAP["$src"]="$dst"
   done < "$DATABASE"
}


# TODO: can be a bit risky, gotta make sure not to truncate the file if error.
function store_data {
   local src dst
   for src in "${!MAP[@]}" ; do
      local dst="${MAP["$src"]}"
      printf '%s\t%s\n' "$src" "$dst"
   done > "${DATABASE}"
}


function validate_add {
   local dst="$1"  # where the file will go: the destination
   local src="$2"  # where it comes from: ./dotfiles/

   if [[ ! $dst ]] ; then
      printf 'missing dst.\n'
      exit 1
   fi

   if [[ ! -f $dst && ! -d $dst ]] ; then
      printf 'dst does not exist\n'
      printf '   %s\n'  "$dst"
      exit 1
   fi

   if [[ -L $dst ]] ; then
      printf 'dst already a symlink:\n'
      stat --printf '%N\n'  "$dst"
      exit 1
   fi

   if [[ ! "${PWD}/${dst}" == ${HOME}* ]] ; then
      printf 'dst must be under %s\n'  "$HOME"
      exit 1
   fi

   if [[ ! $src ]] ; then
      printf 'missing src.\n'
      exit 1
   fi

   if [[ $src =~ ^[/~] ]] ; then
      printf 'source must be relative\n'
      exit 1
   fi
}


function validate_database {
   local -a deleted=()

   local _k
   for _k in "${!MAP[@]}" ; do
      local _v="${MAP["$_k"]}"
      deleted["$_k"]="$_v"
   done

   local src
   for src in "${!MAP[@]}" ; do
      if [[ -e "${PROGDIR}/dotfiles/${src}" ]] ; then
         unset 'deleted[$src]'
      fi
   done

   if (( ${#deleted[@]} )) ; then
      printf 'these are in the database, but not the filesystem\n'
      printf ' %s\n'  "${deleted[@]}"
      exit 1
   fi
}


function cmd_add {
   local dst="$1"
   local src="$2"

   validate_add "$dst" "$src"
   load_data

   local abs_src  abs_dst  rel_dst
   abs_src="${PROGDIR}/dotfiles/${src}"
   abs_dst=$( realpath "$dst" )
   rel_dst="${abs_dst#${HOME}/}"

   if [[ "${MAP[$src]}" ]] ; then
      printf 'mapping already exists from\n'
      printf ' %s -> %s\n'  "$src"  "${MAP[$src]}"
      exit 1
   fi

   if [[ -e $abs_src ]] ; then
      printf 'src already exists.\n'
      ls -l "$abs_src"
   fi

   printf 'make local backup...\n'
   echo  cp -v --backup='existing' "$abs_dst" "${abs_dst}.bak"

   printf '\nassume ownership...\n'
   echo  mkdir -vp "${abs_src%/*}"
   echo  mv -vn "$abs_dst" "$abs_src"

   printf '\nlink back...\n'
   echo  ln -v "$abs_src" "$abs_dst"

   ## THINKIES:
   ## Unsure if I want to auto add->commit. Doesn't give the opportunity to
   ## potentially modify .hgignore if needed. I feel like I'm unlikely to use
   ## any of these commands often enough to warrant it automatically adding &
   ## committing.

   printf '\nadd & commit...\n'
   echo  $hg add "$abs_src"
   echo  $hg commit -m "Add ${rel_dst} as ${src}"

   store_data
}


function cmd_deploy {
   local src="$1"

   if [[ ! $src ]] ; then
      printf 'missing src.\n'
      exit 1
   fi

   load_data
   local dst="${MAP[$src]}"

   if [[ ! $dst ]] ; then
      printf 'src not found in database\n'
      exit 1
   fi

   local abs_src="${PROGDIR}/dotfiles/${src}"
   local abs_dst="${HOME}/${dst}"

   if [[ ! -e $abs_src ]] ; then
      printf 'src file seems not to exist at...\n'
      printf ' %s\n'  "$abs_src"
      exit 1
   fi

   if [[ -L $abs_src ]] ; then
      printf 'dst already a symlink:\n'
      stat --printf '%N\n'  "$dst"
      exit 1
   fi

   ln -sv --backup='numbered' "$abs_src" "$abs_dst"
}


case "$1" in
   '' | -h | --help)
      usage 0 ;;

   # Regular commands.
   add)
      cmd_add "${@:2}" ;;

   deploy)
      cmd_deploy "${@:2}" ;;

   tree)
      cd "$PROGDIR"
      tree --prune --noreport -a -I .hg dotfiles ;;

   ls)
      sort -k2 "${DATABASE}" | column -t ;;

   validate)
      validate_database ;;

   # Repository commands.
   hg)
      hg -R "${PROGDIR}" "${@:2}" ;;

   #diff)
   #   hg -R "${PROGDIR}" diff "${@:2}" ;;

   *) usage 1 ;;
esac

#!/usr/bin/env bash
# vim: ft=bash tw=80
# shellcheck disable=SC2155,SC2016,SC2295,SC2086
#
#--- TODO ----------------------------------------------------------------------
# [ ] rollback on add/deploy errors
#     - rate of errors is currently quite low
#     - not worth wiring up complex rollbacks for something that does not oft
#       occur
# [ ] bash completion
#
#-------------------------------------------------------------------------------
set -eo pipefail

declare -g  THIS=$( realpath "${BASH_SOURCE[0]}" )
declare -g  PROGDIR="${THIS%/*}"
declare -g  DATABASE="${PROGDIR}/database"
declare -gA DATA=()   # { source -> dest }

touch "${DATABASE}" -a
mkdir -p "${PROGDIR}/dotfiles"

mkdir -p "${PROGDIR}/logs"
declare -g LOGFILE="${PROGDIR}/logs/log"


function usage {
   declare -i status="$1"
   cat <<EOF

usage: ${THIS##*/} [option] command

commands:
   add FILE          assume ownership of \$FILE
   deploy FILE       symlink owned \$FILE to host
   ls                print owned files

EOF
exit "$status"
}


function load_data {
   local src dst
   while IFS=$'\t' read -r src dst ; do
      DATA["$src"]="$dst"
   done < "$DATABASE"
}


function new_source {
   local src="SOURCE_LIST_$(( ++_SOURCE_LIST_IDX ))"
   declare -ga "$src"
   declare -g SOURCE_LIST="$src"
}


# TODO: can be a bit risky, gotta make sure not to truncate the file if error.
function store_data {
   local src dst
   for src in "${!DATA[@]}" ; do
      local dst="${DATA["$src"]}"
      printf '%s\t%s\n' "$src" "$dst"
   done                        \
   | sort -k2                  \
   | column -t -s$'\t' -o$'\t' \
   > "${DATABASE}"
}


function validate_add {
   local dst="$1"  # where the file will go: the destination
   local src="$2"  # where it comes from: ./dotfiles/

   if [[ ! $dst ]] ; then
      printf 'missing dst.\n'
      exit 1
   fi

   if [[ -L $dst ]] ; then
      printf 'dst already a symlink:\n'
      stat --printf '%N\n'  "$dst"
      exit 1
   fi

   if [[ ! -f $dst && ! -d $dst ]] ; then
      printf 'dst does not exist\n'
      printf '   %s\n'  "$dst"
      exit 1
   fi

   if [[ ! "${PWD}/${dst}" == ${HOME}* ]] ; then
      printf 'dst must be under %s\n'  "$HOME"
      exit 1
   fi

   if [[ ! $src ]] ; then
      printf 'missing src.\n'
      exit 1
   fi

   if [[ $src =~ ^[/~] ]] ; then
      printf 'source must be relative\n'
      exit 1
   fi
}


function validate_database {
   local -a deleted=()

   local _k
   for _k in "${!DATA[@]}" ; do
      local _v="${DATA["$_k"]}"
      deleted["$_k"]="$_v"
   done

   local src
   for src in "${!DATA[@]}" ; do
      if [[ -e "${PROGDIR}/dotfiles/${src}" ]] ; then
         unset 'deleted[$src]'
      fi
   done

   if (( ${#deleted[@]} )) ; then
      printf 'these are in the database, but not the filesystem\n'
      printf ' %s\n'  "${deleted[@]}"
      exit 1
   fi
}


function cmd_add {
   local dst="$1"
   local src="$2"

   validate_add "$dst" "$src"
   load_data

   local abs_src  abs_dst  rel_dst
   abs_src="${PROGDIR}/dotfiles/${src}"
   abs_dst=$( realpath "$dst" )
   rel_dst="${abs_dst#${HOME}/}"

   if [[ "${DATA[$src]}" ]] ; then
      printf 'mapping already exists from\n'
      printf ' %s -> %s\n'  "$src"  "${DATA[$src]}"
      exit 1
   fi

   if [[ -e $abs_src ]] ; then
      printf 'src already exists.\n'
      ls -l "$abs_src"
      exit 1
   fi

   # Setup --------------------------------------------------------------------
   printf '\033[37;1m%s\033[0m\n'  'creating logfile'
   local tmpfile=$( mktemp --tmpdir="${PROGDIR}/logs" log.XXX )
   mv -v --backup='numbered' "$tmpfile" "$LOGFILE"

   # Local backup -------------------------------------------------------------
   printf '\n\033[37;1m%s\033[0m\n'  'make local backup...'
   cp -vrT --backup='existing' "$abs_dst" "${abs_dst}.bak" &>> "$LOGFILE"

   # Assume ownership ---------------------------------------------------------
   printf '\n\033[37;1m%s\033[0m\n'  'assume ownership...'
   mkdir -vp "${abs_src%/*}"     &>> "$LOGFILE"
   mv -vn "$abs_dst" "$abs_src"  &>> "$LOGFILE"

   # Symlink back -------------------------------------------------------------
   printf '\n\033[37;1m%s\033[0m\n'  'link back...'
   ln -sv "$abs_src" "$abs_dst"  &>> "$LOGFILE"

   DATA["$src"]="$rel_dst"
   store_data

   # Sanity checks ------------------------------------------------------------
   printf '\n\033[37;1m%s\033[0m\n'  'sanity checks...'

   if ! [[ -L $abs_dst ]] ; then                      # (1) is a symlink
      printf '\033[32;1m%s\033[0m'  '.'
   else
      printf '\033[31;1m%s\033[0m'  'X'
   fi

   if ! diff "${abs_dst}"{,.bak} >/dev/null ; then    # (2) .bak matches
      printf '\033[32;1m.\033[0m'
   else
      printf '\033[31;1mX\033[0m'
   fi

   if ! diff "$abs_dst" "$abs_src" >/dev/null ; then  # (3) dst/src match
      printf '\033[32;1m.\033[0m'
   else
      printf '\033[31;1mX\033[0m'
   fi

   printf '\n'

   # Commit result ------------------------------------------------------------
   #printf '\n\033[37;1madd & commit...\033[0m\n'
   #hg --cwd ${PROGDIR} add "$abs_src"
   #hg --cwd ${PROGDIR} commit "$abs_src" "$DATABASE" -m "Add ${dst} as ${src}"

   printf '\n\033[32;1m%s\033[0m\n'  'done.'
}


function cmd_deploy {
   local src="$1"

   if [[ ! $src ]] ; then
      printf 'missing src.\n'
      exit 1
   fi

   load_data
   local dst="${DATA[$src]}"

   if [[ ! $dst ]] ; then
      printf 'src not found in database\n'
      exit 1
   fi

   local abs_src="${PROGDIR}/dotfiles/${src}"
   local abs_dst="${HOME}/${dst}"

   if [[ ! -e $abs_src ]] ; then
      printf 'src file seems not to exist at...\n'
      printf ' %s\n'  "$abs_src"
      exit 1
   fi

   if [[ -L $abs_src ]] ; then
      printf 'dst already a symlink:\n'
      stat --printf '%N\n'  "$dst"
      exit 1
   fi

   ln -sv --backup='numbered' "$abs_src" "$abs_dst"
}


function cmd_diff {
   local target="$1"
   local -a files=()

   local src dst
   while read -r src dst ; do
      if [[ $dst == "$target" ]] ; then
         files+=( "$src" )
      fi
   done < "$DATABASE"

   if (( ${#files[@]} > 1 )) ; then
      exec nvim -d "${files[@]}" 
   fi
}


case "$1" in
   '' | -h | --help)
      usage 0 ;;

   # Regular commands.
   add) shift
      cmd_add "$@" ;;

   deploy) shift
      cmd_deploy "$@" ;;

   tree) shift
      cd "$PROGDIR"
      tree --noreport --prune -a "$@" dotfiles ;;

   ls | list)
      sort -k2 "${DATABASE}" | column -t ;;

   validate)
      validate_database ;;

   diff)
      cmd_diff "$2" ;;

   hg)
      hg -R "${PROGDIR}" "${@:2}" ;;

   *) usage 1 ;;
esac
